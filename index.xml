<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dvisvgm</title>
    <link>https://dvisvgm.de/</link>
    <description>Recent content on dvisvgm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Jun 2018 15:25:18 +0200</lastBuildDate>
    
	<atom:link href="https://dvisvgm.de/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I converted a simple math formula but get garbage when displaying the SVG. What’s wrong?</title>
      <link>https://dvisvgm.de/FAQ/01-font-paths/</link>
      <pubDate>Fri, 22 Jun 2018 09:16:17 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/01-font-paths/</guid>
      <description>The generated SVG is most likely valid but your SVG viewer/editor probably doesn’t support embedded fonts. Actually, only few SVG renderers, e.g. Apache Batik and the Opera web browser evaluate embedded fonts properly (also see the screenshots). You can run dvisvgm with option --no-fonts to replace the fonts with path elements. Most viewers should render the resulting SVG files correctly. As a drawback, you get bigger files, and the information about the text (characters, baselines, &amp;hellip;) gets lost.</description>
    </item>
    
    <item>
      <title>The bounding box of the generated SVG is too small so that some characters are clipped. What can I do?</title>
      <link>https://dvisvgm.de/FAQ/02-exact/</link>
      <pubDate>Fri, 22 Jun 2018 09:17:28 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/02-exact/</guid>
      <description>Run dvisvgm with option --exact. By default, dvisvgm uses the character dimensions (height, depth, width, italic correction, etc.) stored in a font’s TFM file to compute the bounding boxes. However, as the TFM bounds are optimized for TeX’s character positioning, and as the actual glyphs may exceed their TFM bounds, clipped SVG files are the result. Option --exact tells dvisvgm to analyze each glyph and to compute the exact bounding rectangle.</description>
    </item>
    
    <item>
      <title>Downloads</title>
      <link>https://dvisvgm.de/Downloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dvisvgm.de/Downloads/</guid>
      <description>Windows  dvisvgm 2.5 (32-bit)  dvisvgm-2.5-win32.zip&#34; data-content=&#34;MD5: e8584a8a32a1ec0949c36ebd3496ead4
SHA1: 8e039eff4aa2c9ac6d2fbf1b4633bf6be3dd997b&#34;    dvisvgm 2.5 (64-bit)  dvisvgm-2.5-win64.zip&#34; data-content=&#34;MD5: be4fee7aba5c1786ac7e7b401c568740
SHA1: 1a229cb460feedb24be628cdf90936fc052b8d2a&#34;       All  dvisvgm 2.5 (Source)  dvisvgm-2.4.tar.gz&#34; data-content=&#34;MD5: 4fc6001228a8902f76869719d055d948
SHA1: 4c84e326948dd0a4c2a97d01fc5974a7f7cdf225&#34;     Linux Binary Packages Some Linux distributions provide pre-built binary packages of dvisvgm. In most cases, they are available from the official repositories.
 On Fedora, you can install the binary with dnf:</description>
    </item>
    
    <item>
      <title>Why do I get warnings like _can’t embed font &#39;FOO_&#39;?</title>
      <link>https://dvisvgm.de/FAQ/03-lua-fonts/</link>
      <pubDate>Fri, 22 Jun 2018 09:18:50 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/03-lua-fonts/</guid>
      <description>There are several reasons that could cause these warnings, e.g.:
 The DVI file was generated on a different computer where the mentioned font was available, but in the current TEX environment it’s not. The DVI file was generated by LuaTEX which uses an extended syntax to reference fonts in a DVI file. dvisvgm doesn’t support LuaTEX yet. In this case you get warnings like WARNING: can’t embed font &#39;name:LinuxLibertineO&#39;.  </description>
    </item>
    
    <item>
      <title>Even if I call _dvisvgm_ with option `-n`, the results of some files look wrong. What can I do?</title>
      <link>https://dvisvgm.de/FAQ/04-wrong-results/</link>
      <pubDate>Fri, 22 Jun 2018 09:19:46 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/04-wrong-results/</guid>
      <description>Perhaps you run dvisvgm with PostScript support disabled. See below how to check this and how you can enable the processing of PostScript specials.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://dvisvgm.de/Contact/</link>
      <pubDate>Wed, 20 Jun 2018 13:39:08 +0200</pubDate>
      
      <guid>https://dvisvgm.de/Contact/</guid>
      <description>Author of dvisvgm  Martin Gieseking, Osnabrück, Germany Google+ page    Bug Reports  If you want to report a problem you’re having with dvisvgm, please use the issue tracker at GitHub. For general questions about the utility you can also leave a message in the issue tracker or post a question on TeX Stack Exchange and tag it with {dvisvgm}.    E-Mail Contact  You can also get in touch with me via email.</description>
    </item>
    
    <item>
      <title>Why is _dvisvgm’s_ PostScript support disabled on my machine?</title>
      <link>https://dvisvgm.de/FAQ/05-ps-disabled/</link>
      <pubDate>Fri, 22 Jun 2018 09:20:29 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/05-ps-disabled/</guid>
      <description>dvisvgm requires access to the Ghostscript library in order to process PostScript specials. In contrast to the other third-party libraries needed to build dvisvgm (which are always linked directly), Ghostscript can be attached to dvisvgm in three different ways:
 direct linkage of libgs.so or libgs.a during build time no direct linkage but dynamic lookup of the Ghostscript library and its functions during runtime via dlopen() no Ghostscript support at all  Depending on the configuration options, the dvisvgm binary can be built in three different flavors.</description>
    </item>
    
    <item>
      <title>How do I enable PostScript support on a Windows computer?</title>
      <link>https://dvisvgm.de/FAQ/06-enable-ps/</link>
      <pubDate>Fri, 22 Jun 2018 09:22:40 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/06-enable-ps/</guid>
      <description>Download and install Ghostscript. The 32-bit version of dvisvgm requires the 32-bit version of Ghostscript, the 64-bit dvisvgm requires the 64-bit Ghostscript. As of version 1.9, dvisvgm should find the location of the Ghostscript DLL automatically. If it does not, proceed with the following steps. Look up the Ghostscript directory that contains the Ghostscript DLL gsdll32.dll or gsdll64.dll (usually something like c:\program files\gs\gs9.23\bin). Tell dvisvgm where to find the Ghostscript DLL.</description>
    </item>
    
    <item>
      <title>What does the error _MiKTeX session could not be initialized_ mean?</title>
      <link>https://dvisvgm.de/FAQ/07-miktex-session/</link>
      <pubDate>Fri, 22 Jun 2018 09:26:45 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/07-miktex-session/</guid>
      <description>The dvisvgm binaries built for MiKTeX try to call some MiKTeX functions (e.g. those to lookup files) through the COM interface. If it’s not possible to create or access the MiKTeX COM object, dvisvgm can’t proceed and therefore aborts with the error message MiKTeX session could not be initialized. There are several reasons why the session access fails:
 MiKTeX isn’t installed on the computer. You use the MiKTeX Portable edition.</description>
    </item>
    
    <item>
      <title>DVI files containing PostScript code are not converted properly. Are you going to fix this?</title>
      <link>https://dvisvgm.de/FAQ/08-clipping/</link>
      <pubDate>Fri, 22 Jun 2018 09:24:01 +0200</pubDate>
      
      <guid>https://dvisvgm.de/FAQ/08-clipping/</guid>
      <description>PostScript is a pretty complex language and its interaction with the DVI operations is rather tricky, especially, if plain PostScript snippets are supposed to change the current graphic position or the current font.
 Defining and/or changing fonts via PostScript is not supported yet. Shading/gradient fills are implemented partially. Function-based (type 1), axial (type 2), and radial (type 3) shadings are not supported yet.  Clipping issues The SVG standard allows to define clipping paths by intersection like so: &amp;lt;!</description>
    </item>
    
    <item>
      <title>dvisvgm 2.5 has been released</title>
      <link>https://dvisvgm.de/News/dvisvgm-2.5.0/</link>
      <pubDate>Wed, 08 Aug 2018 09:49:29 +0200</pubDate>
      
      <guid>https://dvisvgm.de/News/dvisvgm-2.5.0/</guid>
      <description>This is a small feature release with the following additions/changes:
 Added multi-page support to PDF mode, i.e. when converting PDF file using option --pdf, the pages to be processed can be selected with option --page. All transformation options, like --scale, --rotate, and --transform, now work in the PDF mode too. Added support for all nine length units to option --transform. Previously, only some of them were available. For further information see the manual page.</description>
    </item>
    
    <item>
      <title>Manual Page</title>
      <link>https://dvisvgm.de/Manpage/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dvisvgm.de/Manpage/</guid>
      <description>Name EPUB version   PDF version  dvisvgm – converts DVI and EPS files to the XML-based SVG format  Synopsis dvisvgm [ options ] file [.dvi]
dvisvgm --eps [ options ] file [.eps]
dvisvgm --pdf [ options ] file [.pdf]
  Description The command-line utility dvisvgm converts DVI files, as generated by TeX/LaTeX, to the XML-based scalable vector graphics format SVG. It supports the classic DVI version 2 as well as version 3 (created by pTeX in vertical mode), and the XeTeX versions 5 to 7 which are also known as XDV.</description>
    </item>
    
    <item>
      <title>dvisvgm 2.4.2 has been released</title>
      <link>https://dvisvgm.de/News/dvisvgm-2.4.2/</link>
      <pubDate>Wed, 18 Jul 2018 18:43:24 +0200</pubDate>
      
      <guid>https://dvisvgm.de/News/dvisvgm-2.4.2/</guid>
      <description>This is another small maintenance release.
 Fixed the height and depth values computed when using the preview package (issue #89). Slightly reduced the size of the bounding boxes applied to hyperlinked areas to obtain tight bounds. No longer print warnings if special psfile is called with argument /dev/null. For example, option psfixbb of the preview package adds these specials in order to help dvips to compute correct bounding boxes. Those DVI files used to produce a couple of redundant warnings when processed with dvisvgm.</description>
    </item>
    
    <item>
      <title>dvisvgm 2.4.1 has been released</title>
      <link>https://dvisvgm.de/News/dvisvgm-2.4.1/</link>
      <pubDate>Sat, 07 Jul 2018 12:49:27 +0200</pubDate>
      
      <guid>https://dvisvgm.de/News/dvisvgm-2.4.1/</guid>
      <description>This is a small maintenance release with the following changes:
 Fixed the handling of the optional delay parameter of option --progress. Updated the brotli library to version 1.0.5. Updated the woff2 library to version 1.0.2 Updated several URLs in the manual page. Several minor code refactorings.  </description>
    </item>
    
    <item>
      <title>Website moved to the new domain _dvisvgm.de_</title>
      <link>https://dvisvgm.de/News/github-pages/</link>
      <pubDate>Fri, 06 Jul 2018 16:06:57 +0200</pubDate>
      
      <guid>https://dvisvgm.de/News/github-pages/</guid>
      <description>To simplify the maintenance of both the website and the program code, I rebuilt the former wiki-based website with a static site generator and moved everything to GitHub Pages. The site is now reachable under the new domain dvisvgm.de.
The old SourceForge (dvisvgm.sf.net) and bplaced (dvisvgm.bplaced.net) addresses now redirect to the new location. Since I&amp;rsquo;ve kept the page structure, all former URLs should still be valid. If you find a page, a resource, or link that doesn&amp;rsquo;t work, let me know.</description>
    </item>
    
    <item>
      <title>Intersection of clipping paths</title>
      <link>https://dvisvgm.de/Clipping/</link>
      <pubDate>Wed, 27 Jun 2018 14:16:29 +0200</pubDate>
      
      <guid>https://dvisvgm.de/Clipping/</guid>
      <description>In order to restrict the area where drawing commands lead to visible results, SVG allows the definition of clipping paths. A clipping path is a set of closed vector path that may consist of an arbitrary number of straight and curved segments. The region(s) enclosed by the path define(s) the visible area, i.e. after applying a clipping path, only those portions of the subsequently drawn graphics that fall inside the enclosed area are visible, everything else is cut away.</description>
    </item>
    
    <item>
      <title>Related Projects</title>
      <link>https://dvisvgm.de/Links/</link>
      <pubDate>Thu, 21 Jun 2018 15:03:08 +0200</pubDate>
      
      <guid>https://dvisvgm.de/Links/</guid>
      <description>TeX distributions that provide dvisvgm  MiKTeX
A pretty complete TEX distribution for Windows with a nice package and update manager maintained by Christian Schenk. Since December 2015 is has also offered a dvisvgm package. You can find separate dvisvgm binaries for MiKTeX on the download page, too. TeX Live
Since 2010 dvisvgm has been part of this most complete and highly portable TEX distribution provided by the TEX Users Group (TUG).</description>
    </item>
    
    <item>
      <title>Screenshots</title>
      <link>https://dvisvgm.de/Screenshots/</link>
      <pubDate>Thu, 21 Jun 2018 14:57:30 +0200</pubDate>
      
      <guid>https://dvisvgm.de/Screenshots/</guid>
      <description>To convert a DVI file to SVG, just call dvisvgm with the name of the DVI file. The suffix .dvi can be omitted.
In this example, the first page of frktest.dvi has been converted and written to frktest.svg. Since the font yinitas wasn’t available as a vector font, dvisvgm called Metafont and vectorized the two glyphs of Metafont’s bitmap output required for the document. They are stored in a cache file so that it’s not necessary to call Metafont for these glyphs again which will speed up the conversion process.</description>
    </item>
    
    <item>
      <title>SVG Examples</title>
      <link>https://dvisvgm.de/Examples/</link>
      <pubDate>Thu, 21 Jun 2018 14:54:46 +0200</pubDate>
      
      <guid>https://dvisvgm.de/Examples/</guid>
      <description>Click on an image to load the corresponding SVG file.  yfonts sample page
 
 lshort sample page
 
 tplot sample page
 
  page from the MusiXTEX  manual
 
 pstricks example
 
 pstricks example
 
  TikZ example
 
 pstricks example
 
 pstricks example
 
  TikZ example</description>
    </item>
    
    <item>
      <title>Color Gradient Fills</title>
      <link>https://dvisvgm.de/Gradients/</link>
      <pubDate>Wed, 20 Jun 2018 21:57:05 +0200</pubDate>
      
      <guid>https://dvisvgm.de/Gradients/</guid>
      <description>The current SVG standard 1.1 provides elements to define linear and radial gradients which allow to fill a region with a smooth transition of colors along a specified vector. In comparison to the PostScript language, these gradient variants are rather limited. PostScript supports seven different types of gradients including function-based shadings, Gouraud-shaded triangle meshes, and tensor-product patch meshes. Therefore, it’s not possible to map complex gradient definitions present in EPS files or PostScript specials to native SVG 1.</description>
    </item>
    
  </channel>
</rss>